#!/usr/bin/python
# The yum executable redirecting to dnf from dnf-yum compatible package.
#
# Emulates yum behavior as much as possible by translating commonly used yum
# commands to their closest dnf counterparts or setting up some cmdline
# options.
#
# Copyright (C) 2016 Red Hat, Inc.
#
# This copyrighted material is made available to anyone wishing to use,
# modify, copy, or redistribute it subject to the terms and conditions of
# the GNU General Public License v.2, or (at your option) any later version.
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY expressed or implied, including the implied warranties of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General
# Public License for more details.  You should have received a copy of the
# GNU General Public License along with this program; if not, write to the
# Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
# 02110-1301, USA.  Any Red Hat trademarks that are incorporated in the
# source code or documentation are not subject to the GNU General Public
# License and may only be used or replicated with the express permission of
# Red Hat, Inc.
#

import sys

from dnf.cli import main


# ================
# Argument filters
# ================

def deprecate(cmd, prec, succ):
    """Filter deprecated commands."""
    if cmd == 'update':
        return prec + ['upgrade'] + succ


# Argument filters to apply (in the given order)
filters = [deprecate]


# ==============
# Main functions
# ==============

def filter_args(args):
    """Apply the filters to args and return the resulting list."""

    def cmd_index(args):
        """Return the index in args of the yum command used."""
        for i, arg in enumerate(args):
            if not arg.startswith('-'):
                return i
        return None

    for filter in filters:
        i = cmd_index(args)
        if i is not None:
            cmd = args[i]
            prec = args[:i]
            succ = args[(i + 1):]
        else:
            cmd = None
            prec = args
            succ = None
        args = filter(cmd, prec, succ)

    return args


if __name__ == '__main__':
    args = filter_args(sys.argv[1:])
    main.user_main(args, exit_code=True)
